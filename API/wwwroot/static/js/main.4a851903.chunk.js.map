{"version":3,"sources":["app/models/pagination.ts","app/models/profile.ts","app/api/agent.ts","app/models/activity.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestErrors.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","Profile","user","username","displayName","image","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","register","Profiles","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","setLoadingInitial","axiosParams","result","setActivity","setPagination","console","log","loadActivity","getActivity","runInAction","createActivity","userStore","attendee","newActivity","hostUsername","attendees","updateActivity","updatedActivity","deleteActivity","state","updateAttendance","isGoing","filter","cancelActivityToggle","isCancelled","some","isHost","host","find","x","Date","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploadingPhoto","loadingFollowings","followings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","event","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","autoClose","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.4a851903.chunk.js","sourcesContent":["export interface Pagination { \r\n\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> { \r\n\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) { \r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import { User } from './user';\r\n\r\nexport interface Profile { \r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile { \r\n    constructor(user: User) { \r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo { \r\n\r\n    id: string,\r\n    url: string,\r\n    isMain: boolean\r\n}\r\n\r\nexport interface UserActivity { \r\n\r\n    id: string,\r\n    title: string,\r\n    category: string,\r\n    date: Date\r\n}","import { PaginatedResult } from './../models/pagination';\r\nimport { Photo, Profile, UserActivity } from './../models/profile';\r\nimport { ActivityFormValues } from './../models/activity';\r\nimport { UserFormValues } from './../models/user';\r\nimport { store } from './../stores/store';\r\nimport axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity } from '../models/activity';\r\nimport { User } from '../models/user';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use((config) => {\r\n\r\n    const token = store.commonStore.token;\r\n\r\n    if (token) {\r\n        config.headers!.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n});\r\n\r\naxios.interceptors.response.use(async response => {\r\n\r\n    // For testing requests - helps observe things like loading functionality\r\n    if (process.env.NODE_ENV === 'development') {\r\n        await sleep(1000);\r\n    }\r\n\r\n    const pagination = response.headers['pagination'];\r\n\r\n    if (pagination) { \r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n\r\n    return response;\r\n  \r\n    // Non async way of using\r\n    // return sleep(1000).then(() => {\r\n    //     return response;\r\n    // }).catch((error) => {\r\n    //     console.log(error);\r\n    //     return Promise.reject(error);\r\n    // })\r\n\r\n}, (error: AxiosError) => {\r\n\r\n    const { data, status, config } = error.response!;\r\n\r\n    //console.log(error.response);\r\n\r\n    switch (status) {\r\n        case 400:\r\n\r\n            //toast.error('bad request');\r\n\r\n            if (typeof (data) === 'string') {\r\n                toast.error(data);\r\n            }\r\n\r\n            // Handles bad guid\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n\r\n            if (data.errors) {\r\n\r\n                const modalStateErrors = [];\r\n\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n\r\n                throw modalStateErrors.flat();\r\n            }\r\n            \r\n            break;\r\n        \r\n        case 401:\r\n            toast.error('unauthorized');\r\n            break;\r\n        \r\n        case 404:\r\n            //toast.error('not found');\r\n            history.push('/not-found');\r\n            break;\r\n        \r\n        case 500:\r\n            //toast.error('server error');\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    delete: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios\r\n        .get<PaginatedResult<Activity[]>>('/activities', { params })\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.delete<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => { \r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type':'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`),\r\n\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from './profile';\r\nexport interface Activity {\r\n    id:          string;\r\n    title:       string;\r\n    date:        Date | null;\r\n    description: string;\r\n    category:    string;\r\n    city:        string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity { \r\n    constructor(init?: ActivityFormValues) { \r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues { \r\n\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) { \r\n        if (activity) { \r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n        }\r\n    }\r\n}","import { Pagination, PagingParams } from './../models/pagination';\r\nimport { ActivityFormValues } from './../models/activity';\r\nimport { Profile } from './../models/profile';\r\nimport { store } from './store';\r\nimport { format } from 'date-fns';\r\nimport { makeAutoObservable, runInAction, reaction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { Activity } from '../models/activity';\r\n\r\nexport default class ActivityStore {\r\n\r\n    activityRegistry = new Map <string, Activity> ();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => { \r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => { \r\n\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => { \r\n\r\n        const resetPredicate = () => { \r\n            this.predicate.forEach((value, key) => { \r\n                if (key !== 'startDate') { \r\n                    this.predicate.delete(key);\r\n                }\r\n            })\r\n        }\r\n\r\n        switch (predicate) {\r\n\r\n            case \"all\":\r\n\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            \r\n            case \"isGoing\":\r\n\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);         \r\n                break;\r\n            \r\n            case \"isHost\":\r\n                \r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);         \r\n                break;\r\n            \r\n            case \"startDate\":\r\n                \r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() { \r\n        const params = new URLSearchParams();\r\n\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n\r\n        this.predicate.forEach((value, key) => {\r\n\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            }\r\n            else { \r\n                params.append(key, value);\r\n            }\r\n        });\r\n\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                \r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n                \r\n            }, {} as {[key: string]: Activity[]})\r\n        );\r\n    }\r\n\r\n    // Arrow function auto binds this keyword to class\r\n    // Easier to use in this case\r\n\r\n    // Loads activities into memory\r\n    loadActivities = async () => {\r\n\r\n        this.setLoadingInitial(true);\r\n\r\n        try {\r\n\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n\r\n            // Just getting a simple date\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n\r\n            this.setPagination(result.pagination);\r\n\r\n            this.setLoadingInitial(false);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => { \r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n\r\n        let activity = this.getActivity(id);\r\n        \r\n        // If activity already in memory return it\r\n        // else fetch from api\r\n        if (activity) {\r\n\r\n            this.selectedActivity = activity;\r\n\r\n            return activity;\r\n\r\n        } else {\r\n\r\n            this.setLoadingInitial(true);\r\n\r\n            try {\r\n\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                \r\n                this.setLoadingInitial(false);\r\n\r\n                return activity;\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        \r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n\r\n        try {\r\n\r\n            await agent.Activities.create(activity);\r\n\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n\r\n            this.setActivity(newActivity);\r\n\r\n            runInAction(() => this.selectedActivity = newActivity);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        \r\n        try {\r\n\r\n            await agent.Activities.update(activity);\r\n\r\n            runInAction(() => {\r\n\r\n                if (activity.id) { \r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity }\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n\r\n        this.loading = true;\r\n\r\n        try {\r\n\r\n            await agent.Activities.delete(id);\r\n\r\n            runInAction(() => {\r\n                \r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n\r\n            runInAction(() => { \r\n\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n\r\n        } catch (error) { \r\n            console.log(error);\r\n        }finally{ \r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => { \r\n\r\n        this.loading = true;\r\n\r\n        try {\r\n\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n\r\n            runInAction(() => { \r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n\r\n        } catch (error) { \r\n            console.log(error);\r\n        }finally{ \r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    // Helper method\r\n    private setActivity = (activity: Activity) => {\r\n\r\n        const user = store.userStore.user;\r\n\r\n        if (user) { \r\n\r\n            // If a user is in attendees list\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    // Helper method\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    clearSelectedActivity = () => { \r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => { \r\n\r\n        this.activityRegistry.forEach(activity => { \r\n            activity.attendees.forEach(attendee => { \r\n                if (attendee.username === username) { \r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, runInAction, reaction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { Photo, Profile, UserActivity } from './../models/profile';\r\nimport { store } from './store';\r\n\r\nexport default class ProfileStore { \r\n\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploadingPhoto = false;\r\n    loading = false;\r\n    loadingFollowings = false;\r\n    followings: Profile[] = [];\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n    \r\n    constructor() { \r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => { \r\n\r\n                if (activeTab === 3 || activeTab === 4) {\r\n\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                }\r\n                else {\r\n\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => { \r\n        \r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() { \r\n\r\n        if (store.userStore.user && this.profile) { \r\n            //console.log(this.profile.username)\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => { \r\n\r\n        this.loadingProfile = true;\r\n\r\n        try {\r\n            \r\n            const profile = await agent.Profiles.get(username);\r\n\r\n            //console.log(profile);\r\n\r\n            runInAction(() => {\r\n\r\n                this.profile = profile;\r\n                this.loadingProfile = false; \r\n            });\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => { \r\n\r\n        this.uploadingPhoto = true;\r\n\r\n        try {\r\n            \r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n\r\n            runInAction(() => {\r\n\r\n                if (this.profile) { \r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) { \r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploadingPhoto = false;\r\n            });\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploadingPhoto = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => { \r\n\r\n        this.loading = true;\r\n\r\n        try {\r\n            \r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n\r\n            runInAction(() => {\r\n\r\n                // Set current main photo to new one\r\n                if (this.profile && this.profile.photos) { \r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                }\r\n                \r\n                this.loading = false;\r\n            });\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => { \r\n\r\n        this.loading = true;\r\n\r\n        try {\r\n            \r\n            await agent.Profiles.deletePhoto(photo.id);\r\n\r\n            runInAction(() => {\r\n\r\n                if (this.profile) { \r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                }\r\n                \r\n                this.loading = false;\r\n            });\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => { \r\n\r\n        this.loading = true;\r\n\r\n        try {\r\n            \r\n            await agent.Profiles.updateProfile(profile);\r\n\r\n            runInAction(() => {\r\n\r\n                \r\n                //if (profile.displayName\r\n                    //&& profile.displayName !== store.userStore.user?.displayName\r\n                //) { \r\n\r\n                this.profile = { ...this.profile, ...profile as Profile }; \r\n                store.userStore.setDisplayName(profile.displayName!);\r\n                //}\r\n \r\n                this.loading = false;\r\n            });\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => { \r\n\r\n        this.loading = true;\r\n\r\n        try {\r\n            \r\n            await agent.Profiles.updateFollowing(username);\r\n\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n\r\n            runInAction(() => {\r\n\r\n                if (this.profile\r\n                    && this.profile.username !== store.userStore.user?.username\r\n                    && this.profile.username === username\r\n                )\r\n                {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n\r\n                if (this.profile\r\n                    && this.profile.username === store.userStore.user?.username\r\n                )\r\n                {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n\r\n                this.followings.forEach(profile => { \r\n\r\n                    if (profile.username === username) { \r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n \r\n                this.loading = false;\r\n            });\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => { \r\n\r\n        this.loadingFollowings = true;\r\n\r\n        try {\r\n            \r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n\r\n            runInAction(() => {\r\n\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            });\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => { \r\n\r\n        this.loadingActivities = true;\r\n\r\n        try {\r\n            \r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            });\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingActivities = false);\r\n        }\r\n    }\r\n}","import { UserFormValues } from './../models/user';\r\nimport { makeAutoObservable, runInAction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { User } from '../models/user';\r\nimport { store } from './store';\r\nimport { history } from '../..';\r\n\r\nexport default class UserStore {\r\n\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n\r\n            runInAction(() => {\r\n                this.user = user;\r\n            });\r\n\r\n            history.push('/activities');\r\n\r\n            store.modalStore.closeModal();\r\n            \r\n            console.log(user);\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        \r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n\r\n            runInAction(() => {\r\n                this.user = user;\r\n            });\r\n\r\n            history.push('/activities');\r\n\r\n            store.modalStore.closeModal();\r\n            \r\n            console.log(user);\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => { \r\n        if (this.user) {\r\n            this.user.image = image;\r\n        }\r\n    }\r\n\r\n    setDisplayName = (displayName: string) => { \r\n        if (this.user) {\r\n            this.user.displayName = displayName;\r\n        }\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore\r\n    commonStore: CommonStore\r\n    userStore: UserStore\r\n    modalStore: ModalStore\r\n    profileStore: ProfileStore\r\n    commentStore: CommentStore\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore(),\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from 'mobx';\r\nimport { ServerError } from './../models/serverError';\r\n\r\nexport default class CommonStore {\r\n\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from 'mobx';\r\n\r\ninterface Modal {\r\n    open: boolean,\r\n    body: JSX.Element | null\r\n}\r\n\r\nexport default class ModalStore {\r\n\r\n    modal : Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { store } from './store';\r\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\nimport { makeAutoObservable, runInAction } from 'mobx';\r\nimport { ChatComment } from '../models/comment';\r\n\r\nexport default class CommentStore {\r\n\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => { \r\n\r\n        if (store.activityStore.selectedActivity) { \r\n\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n            \r\n            this.hubConnection.start()\r\n                .catch(error => console.log('Error establishing the connection: ' + error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => { \r\n                runInAction(() => {\r\n                    comments.forEach(comment => { \r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => { \r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => { \r\n        this.hubConnection?.stop()\r\n            .catch(error => console.log('Error stopping the connection: ' + error));\r\n    }\r\n\r\n    clearComments = () => { \r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => { \r\n\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n\r\n        try {\r\n\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n\r\n    const { userStore: { user, logout } } = useStore();\r\n\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: 10}} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/activity/create' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst ActivityFilters = function () {\r\n    \r\n    const { activityStore: { predicate, setPredicate } } = useStore();\r\n\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 28 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />  \r\n                \r\n                <Menu.Item\r\n                    content=\"All Activities\"\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n\r\n                <Menu.Item\r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n\r\n            </Menu>\r\n            <Header />\r\n\r\n            <Calendar\r\n                onChange={(date: Date) => setPredicate('startDate', date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityFilters);","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Button, Reveal } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props { \r\n    profile: Profile\r\n}\r\n\r\nconst FollowButton = function ({ profile }: Props) {\r\n\r\n    const { profileStore, userStore } = useStore();\r\n    const { updateFollowing, loading } = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) { \r\n        return null;\r\n    }\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) { \r\n\r\n        e.preventDefault();\r\n\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n\r\n            <Reveal.Content visible style={{width: '100%'}}>\r\n                <Button\r\n                    fluid\r\n                    color='teal'\r\n                    content={profile.following ? 'Following' : 'Not Following'} />\r\n            </Reveal.Content>\r\n\r\n            <Reveal.Content hidden style={{width: '100%'}}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Un-follow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    );\r\n};\r\n\r\nexport default observer(FollowButton);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props { \r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n\r\n            <Image src={profile.image || 'assets/user.png'} />\r\n\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                { profile.followersCount } followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props { \r\n\r\n    attendees: Profile[];\r\n}\r\n\r\nconst ActivityListItemAttendee = function ({ attendees }: Props) {\r\n\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 4\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map((attendee) => (\r\n\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image\r\n                                size=\"mini\"\r\n                                circular\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                                src={attendee.image || '/assets/user.png'} />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n\r\n                \r\n            ))}\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityListItemAttendee);","import { format } from 'date-fns';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nconst ActivityListItem = function ({ activity }:Props) {\r\n\r\n    return (\r\n\r\n        <Segment.Group>\r\n            <Segment>\r\n                {\r\n                    activity.isCancelled &&\r\n                        <Label attached='top' color='red' content='This activity has been cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        \r\n                        <Item.Image style={{marginBottom: 5}} size='tiny' circular src={activity.host?.image || '/assets/user.png'}/>\r\n\r\n                        <Item.Content>\r\n\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                { activity.title }\r\n                            </Item.Header>\r\n\r\n                            <Item.Description>Hosted by {\" \"}\r\n                                <Link to={`/profiles/${activity.hostUsername}`}>\r\n                                    {activity.host?.displayName}\r\n                                </Link>\r\n                            </Item.Description>\r\n\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' />{format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' />{activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>\r\n                    {activity.description}\r\n                    <Button as={Link} to={`/activities/${activity.id}`} color='teal' floated='right' content='View' />\r\n                </span>\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default ActivityListItem;","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nconst ActivityList = function () {\r\n    \r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {\r\n                groupedActivities.map(([group, activities]) => {\r\n                    return(\r\n                        <Fragment key={group}>\r\n                            <Header sub color='teal'>\r\n                                {group}\r\n                            </Header>\r\n                            {\r\n                                activities.map((activity) => {\r\n                                    return (\r\n                                        <ActivityListItem key={activity.id} activity={activity} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Fragment>\r\n                    )\r\n                })\r\n            }\r\n        </>     \r\n    )\r\n}\r\n\r\nexport default observer(ActivityList);","import React, { Fragment } from 'react';\r\nimport { Button, Placeholder, Segment } from 'semantic-ui-react';\r\n\r\nconst ActivityListItemPlaceholder = function() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='teal' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default ActivityListItemPlaceholder;","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\n//import LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nconst ActivityDashboard = function() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, loadingInitial, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    //console.log(`Dashboard Rendered: Initial load = ${loadingInitial}`);\r\n\r\n    function handleGetNext(){ \r\n\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        // No need to re-fetch if we have them in memory\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n        \r\n    }, [activityRegistry.size, loadActivities]);\r\n\r\n    // if(loadingInitial && !loadingNext) return <LoadingComponent content='Loading Activities' />\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n\r\n                {loadingInitial && !loadingNext ? (\r\n\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n\r\n                ):(\r\n                        \r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n                               \r\n                {/* <Button\r\n                    floated='right'\r\n                    content='More...'\r\n                    positive\r\n                    onClick={handleGetNext}\r\n                    loading={loadingNext}\r\n                    disabled={pagination?.totalPages === pagination?.currentPage}\r\n                /> */}\r\n\r\n            </Grid.Column>\r\n\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n\r\n            <Grid.Column width='10'>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDashboard);","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;\r\n}\r\n\r\nconst MyTextInput = function (props: Props) {\r\n    \r\n    const [field, meta] = useField(props.name)\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {\r\n                meta.touched && meta.error\r\n                    ? (<Label basic color='red'>{meta.error}</Label>)\r\n                    : null\r\n            }\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MyTextInput;","import { Formik, Form, ErrorMessage } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    \r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => {\r\n                return (\r\n                    userStore.login(values).catch((error) => {\r\n                        return setErrors({ error: 'Invalid email or password' })\r\n                    })\r\n                )\r\n            }}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => {\r\n                return (\r\n                    <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete='off'>\r\n                        <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                        <MyTextInput name='email' placeholder='Email' />\r\n                        <MyTextInput name='password' placeholder='Password' type='password' />\r\n                        <ErrorMessage\r\n                            name='error'\r\n                            render={() => <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />}\r\n                        />\r\n                        <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                    </Form>\r\n                )\r\n            }}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nconst ValidationErrors = function ({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => {\r\n                        return(\r\n                            <Message.Item key={i}>\r\n                                {err}\r\n                            </Message.Item>\r\n                        )\r\n                    })}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    );\r\n};\r\n\r\nexport default ValidationErrors;","import { Formik, Form, ErrorMessage } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    \r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', displayName: '', username: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => {\r\n                return (\r\n                    userStore.register(values).catch((error) => {\r\n                        return setErrors({ error });\r\n                    })\r\n                )\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => {\r\n                return (\r\n                    <Form className=\"ui form error\" onSubmit={handleSubmit} autoComplete='off'>\r\n                        <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                        <MyTextInput name='displayName' placeholder='Display Name' />\r\n                        <MyTextInput name='username' placeholder='Username' />\r\n                        <MyTextInput name='email' placeholder='Email' />\r\n                        <MyTextInput name='password' placeholder='Password' type='password' />\r\n                        <ErrorMessage\r\n                            name='error'\r\n                            render={() => <ValidationErrors errors={errors.error} />}\r\n                        />\r\n                        <Button\r\n                            disabled={!isValid || !dirty || isSubmitting}\r\n                            loading={isSubmitting}\r\n                            positive\r\n                            content='Register'\r\n                            type='submit'\r\n                            fluid\r\n                        />\r\n                    </Form>\r\n                )\r\n            }}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container, Header, Image, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nconst HomePage = function () {\r\n    \r\n    const { userStore, modalStore } = useStore();\r\n\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n\r\n                {\r\n                    userStore.isLoggedIn ?\r\n                    (\r\n                        <>\r\n                            <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                            <Button as={Link} to='/activities' size='huge' inverted>\r\n                                Go to Activities\r\n                            </Button>\r\n                        </>                 \r\n                    ) :\r\n                    (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                                Login\r\n                            </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                                Register\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                }\r\n\r\n            </Container>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default observer(HomePage);","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nconst LoadingComponent = function ({inverted=true, content='Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    );\r\n};\r\n\r\nexport default LoadingComponent;","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nconst MyTextArea = function (props: Props) {\r\n    \r\n    const [field, meta] = useField(props.name)\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {\r\n                meta.touched && meta.error\r\n                    ? (<Label basic color='red'>{meta.error}</Label>)\r\n                    : null\r\n            }\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MyTextArea;","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nconst MySelectInput = function (props: Props) {\r\n    \r\n    const [field, meta, helpers] = useField(props.name)\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(event, data) => {\r\n                    helpers.setValue(data.value);\r\n                }}\r\n                onBlur={() => {\r\n                    helpers.setTouched(true);\r\n                }}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {\r\n                meta.touched && meta.error\r\n                    ? (<Label basic color='red'>{meta.error}</Label>)\r\n                    : null\r\n            }\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MySelectInput;","export const categoryOptions = [\r\n    { text: 'Drinks', value: 'drinks' },\r\n    { text: 'Culture', value: 'culture' },\r\n    { text: 'Film', value: 'film' },\r\n    { text: 'Food', value: 'food' },\r\n    { text: 'Music', value: 'music' },\r\n    { text: 'Travel', value: 'travel' },\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\n\r\nconst MyDateInput = function (props: Partial<ReactDatePickerProps>) {\r\n    \r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {\r\n                meta.touched && meta.error\r\n                    ? (<Label basic color='red'>{meta.error}</Label>)\r\n                    : null\r\n            }\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MyDateInput;","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { useParams } from 'react-router';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nconst ActivityForm = function () {\r\n\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n    \r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('The activity date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        \r\n        if (id) {\r\n            loadActivity(id).then((activity) => {\r\n                setActivity(new ActivityFormValues(activity));\r\n            });\r\n        }\r\n\r\n    }, [id, loadActivity])\r\n    \r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n\r\n        if (!activity.id) {\r\n\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            }\r\n\r\n            createActivity(newActivity).then(() => {\r\n                \r\n                history.push(`/activities/${newActivity.id}`);\r\n            });\r\n\r\n        } else {\r\n            updateActivity(activity).then(() => {\r\n                history.push(`/activities/${activity.id}`);\r\n            })\r\n        } \r\n    }\r\n\r\n    if(loadingInitial) return <LoadingComponent content='Loading Activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n\r\n            <Header content='Activity Details' sub color='teal' />\r\n\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {\r\n                    ({ handleSubmit, isValid, isSubmitting, dirty }) => {\r\n                        return (\r\n                            <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n\r\n                                <MyTextInput name='title' placeholder='title' />                              \r\n                                <MyTextArea placeholder='Description' rows={3} name='description' />\r\n                                <MySelectInput placeholder='Category' name='category' options={categoryOptions} />\r\n                                <MyDateInput\r\n                                    placeholderText='Date'\r\n                                    name='date'\r\n                                    showTimeSelect\r\n                                    timeCaption='time'\r\n                                    dateFormat='MMMM d, yyyy h:mm aa'\r\n                                />\r\n\r\n                                <Header content='Location Details' sub color='teal' />\r\n\r\n                                <MyTextInput placeholder='City' name='city' />\r\n                                <MyTextInput placeholder='Venue' name='venue' />\r\n\r\n                                <Button\r\n                                    disabled={isSubmitting || !dirty || !isValid}\r\n                                    loading={isSubmitting}\r\n                                    floated='right'\r\n                                    positive\r\n                                    type='submit'\r\n                                    content='Submit'\r\n                                />\r\n                                <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                            </Form>\r\n                       )\r\n                    }\r\n                }\r\n            </Formik>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityForm);","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props { \r\n\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => { \r\n\r\n        if (activityId) { \r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n\r\n        return () => { \r\n            commentStore.clearComments();\r\n        }\r\n\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            \r\n            <Segment attached clearing>\r\n\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => { resetForm() })}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comments (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) { \r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) { \r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n\r\n                        <Comment key={comment.id}>\r\n\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            \r\n                            <Comment.Content>\r\n\r\n                                <Comment.Author\r\n                                    as={Link}\r\n                                    to={`/profiles/${comment.username}`}\r\n                                >\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n\r\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n\r\n                                {/* <Comment.Actions>\r\n                                    <Comment.Action>Reply</Comment.Action>\r\n                                </Comment.Actions> */}\r\n\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n                </Comment.Group>\r\n\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    \r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label\r\n                        style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red'\r\n                        content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by {' '}\r\n                                    <strong>\r\n                                        <Link to={`/profiles/${activity.host?.username}`}>\r\n                                            {activity.host?.displayName}\r\n                                        </Link>\r\n                                    </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n\r\n                {\r\n                    activity.isHost ?\r\n                    (\r\n                        <>\r\n\r\n                            <Button\r\n                                color={activity.isCancelled ? 'green' : 'red'}\r\n                                floated='left'\r\n                                basic\r\n                                content={activity.isCancelled ? 'Re-Activate Activity' : 'Cancel Activity'}\r\n                                onClick={cancelActivityToggle}\r\n                                loading={loading}\r\n                            />\r\n                                \r\n                            <Button\r\n                                as={Link}\r\n                                to={`/activity/manage/${activity.id}`}\r\n                                color='orange'\r\n                                floated='right'\r\n                                disabled={activity.isCancelled}\r\n                            >\r\n                                Manage Event\r\n                            </Button>\r\n                        </>\r\n                        \r\n                    ) : activity.isGoing ?\r\n                        (\r\n                            <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                        )\r\n                        :(\r\n                            <Button\r\n                                loading={loading}\r\n                                onClick={updateAttendance}\r\n                                color='teal'\r\n                                disabled={activity.isCancelled}\r\n                            >\r\n                                Join Activity\r\n                            </Button>\r\n                        )\r\n                }\r\n                \r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props { \r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n\r\n    if (!attendees) return null;\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n\r\n                    {attendees.map((attendee) => (\r\n\r\n                        <Item key={attendee.username} style={{ position: 'relative' }}>\r\n\r\n                            {attendee.username === host?.username &&\r\n                                \r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            }\r\n\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n\r\n                            <Item.Content verticalAlign='middle'>\r\n                                \r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n\r\n                                {attendee.following &&\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                                }\r\n\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                    \r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nconst ActivityDetails = function () {\r\n\r\n    const { activityStore } = useStore();\r\n    const { selectedActivity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n    \r\n    useEffect(() => {\r\n\r\n        if (id) {\r\n            loadActivity(id);\r\n        }\r\n\r\n        return () => { \r\n            clearSelectedActivity();\r\n        }\r\n\r\n    }, [id, loadActivity, clearSelectedActivity])\r\n\r\n    if (loadingInitial || !selectedActivity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={selectedActivity} />\r\n                <ActivityDetailedInfo activity={selectedActivity} />\r\n                <ActivityDetailedChat activityId={selectedActivity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={selectedActivity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetails);","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => err.response);\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => err.response);\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => err.response);\r\n    }\r\n\r\n    function handleUnauthorized() {\r\n        axios.get(baseUrl + 'buggy/unauthorized').catch(err => err.response);\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err =>err);\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorized} content='Unauthorized' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nconst NotFound = function() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    <Icon name='search' />\r\n                    Return to activities\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default NotFound;","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nconst ServerError = function () {\r\n    \r\n    const { commonStore } = useStore();\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h1' color='red' content={commonStore.error?.message} />\r\n            {\r\n                commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack Trace' color='teal' />\r\n                    <code style={{ marginTop: '10px' }}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default observer(ServerError);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nconst ModalContainer = function () {\r\n    \r\n    const { modalStore } = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default observer(ModalContainer);","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({ setEditMode }: Props) {\r\n    \r\n    const { profileStore: { profile, updateProfile } } = useStore();\r\n    \r\n    return (\r\n\r\n        <Formik\r\n            initialValues={{displayName: profile?.displayName, bio:profile?.bio}}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {setEditMode(false);})\r\n            }}\r\n            validationSchema={Yup.object({displayName: Yup.string().required(\"required\")})}\r\n        >\r\n\r\n            {({ isSubmitting, isValid, dirty }) => (\r\n                \r\n                <Form className='ui form'>\r\n\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, {useState} from 'react';\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport {Button, Grid, Header, Tab} from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileAbout() {\r\n\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n        \r\n    return (\r\n\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    \r\n                    {isCurrentUser && (\r\n\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                    \r\n                </Grid.Column>\r\n\r\n                <Grid.Column width='16'>\r\n                    \r\n                    {editMode\r\n                        ?<ProfileEditForm setEditMode={setEditMode} />\r\n                        : <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>\r\n                    }\r\n                    \r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Grid, Header, Image, Tab, TabProps } from 'semantic-ui-react';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nconst ProfileActivities = function () {\r\n    \r\n    const panes = [\r\n        { menuItem: 'Future Events', pane: { key: 'future' } },\r\n        { menuItem: 'Past Events', pane: { key: 'past' } },\r\n        { menuItem: 'Hosting', pane: {key: 'hosting'}},\r\n    ]\r\n\r\n    const { profileStore } = useStore();\r\n    const { loadUserActivities, profile, loadingActivities, userActivities } = profileStore;\r\n\r\n    useEffect(() => { \r\n\r\n        loadUserActivities(profile!.username);\r\n\r\n    }, [loadUserActivities, profile])\r\n    \r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => { \r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    }\r\n\r\n    return (\r\n        \r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card as={Link} to={`/activities/${activity.id}`} key={activity.id}>\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{minHeight: 100, objectFit: 'cover'}}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n\r\n    );\r\n};\r\n\r\nexport default observer(ProfileActivities);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nconst ProfileFollowings = function () {\r\n    \r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab === 3\r\n                            ? `People following ${profile?.displayName}`\r\n                            : `People ${profile?.displayName} is following`}\r\n                    />\r\n\r\n                </Grid.Column>\r\n\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {\r\n                            followings.map((profile) => (\r\n                                <ProfileCard key={profile.username} profile={profile} />\r\n                            ))\r\n                        }\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileFollowings);","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props { \r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nconst PhotoWidgetCropper = function ({ imagePreview, setCropper }: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.image-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PhotoWidgetCropper;","import React, {useCallback} from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props { \r\n  setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n  \r\n  const dzStyles = {\r\n    border: 'dashed 3px #eee',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: 200\r\n  }\r\n\r\n  const dzActive = {\r\n    borderColor: 'green',\r\n  }\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n\r\n    // Do something with the files\r\n    setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n      preview: URL.createObjectURL(file)\r\n    })))\r\n\r\n  }, [setFiles])\r\n\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop image here' />\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props { \r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nconst PhotoUploadWidget = function ({ loading, uploadPhoto }: Props) {\r\n    \r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() { \r\n        if (cropper) { \r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => { \r\n\r\n        return () => { \r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n\r\n            <Grid.Column width={1} />\r\n\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n\r\n            <Grid.Column width={1} />\r\n\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n\r\n            <Grid.Column width={1} />\r\n\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Preview & Upload' />\r\n                {\r\n                    files && files.length > 0 &&\r\n                    <>\r\n                        <div className='image-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n\r\n            <Grid.Column width={1} />\r\n\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default PhotoUploadWidget;","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props { \r\n    profile: Profile\r\n}\r\n\r\nconst ProfilePhotos = function ({ profile }: Props) {\r\n\r\n    const { profileStore: {isCurrentUser, uploadPhoto, uploadingPhoto, loading, setMainPhoto, deletePhoto} } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) { \r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) { \r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) { \r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n\r\n            <Grid>\r\n\r\n                <Grid.Column width={16}>\r\n\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n\r\n                </Grid.Column>\r\n\r\n                <Grid.Column width={16}>\r\n\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploadingPhoto} />\r\n                    ):(\r\n                        <Card.Group itemsPerRow={5}>\r\n\r\n                            {profile.photos?.map((photo) => {                                    \r\n                                return (\r\n                                    <Card key={photo.id}>\r\n                                        <Image src={photo.url} />\r\n                                        {isCurrentUser && (\r\n                                            <Button.Group fluid widths={2}>\r\n                                                <Button\r\n                                                    basic\r\n                                                    color='green'\r\n                                                    content='Main'\r\n                                                    name={'main' + photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={target === 'main' + photo.id && loading}\r\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\r\n                                                />\r\n                                                <Button\r\n                                                    basic\r\n                                                    color='red'\r\n                                                    icon='trash'\r\n                                                    loading={target === photo.id && loading}\r\n                                                    onClick={e => handleDeletePhoto(photo, e)}\r\n                                                    disabled={photo.isMain}\r\n                                                    name={photo.id}\r\n                                                />\r\n                                            </Button.Group>\r\n                                        )}\r\n                                    </Card>\r\n                                );\r\n                            })}\r\n\r\n                        </Card.Group>  \r\n                    )}\r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n            \r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfilePhotos);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props { \r\n    profile: Profile\r\n}\r\n\r\nconst ProfileContent = function ({ profile }: Props) {\r\n\r\n    const { profileStore } = useStore();\r\n    \r\n    const panes = [\r\n        { menuItem: 'About', render: () => <ProfileAbout/> },\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\r\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n        { menuItem: 'Following', render: () => <ProfileFollowings /> }\r\n    ]\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default observer(ProfileContent);","import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props { \r\n    profile: Profile\r\n}\r\n\r\nconst ProfileHeader = function ({ profile }: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image ||'/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column width={4}>\r\n\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n\r\n                    <Divider />\r\n\r\n                    <FollowButton profile={profile} />\r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileHeader);","import React, { useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\n\r\nconst ProfilePage = function () {\r\n    \r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => { \r\n\r\n        loadProfile(username);\r\n\r\n        return () => { \r\n            setActiveTab(0);\r\n        }\r\n\r\n    }, [loadProfile, username, setActiveTab])\r\n    \r\n    if (loadingProfile) return <LoadingComponent content='Loading Profile...' />\r\n\r\n    //console.log(profile);\r\n\r\n    return (\r\n        <Grid.Column width={16}>\r\n\r\n            {\r\n                profile &&\r\n                <>\r\n                    <ProfileHeader profile={profile} />\r\n                    <ProfileContent profile={profile} />\r\n                </>\r\n            }\r\n\r\n        </Grid.Column>\r\n    );\r\n};\r\n\r\nexport default observer(ProfilePage);","import React from 'react';\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router-dom';\r\nimport { useStore } from '../stores/store';\r\n\r\ninterface Props extends RouteProps { \r\n\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\r\n}\r\n\r\nconst PrivateRoute = function ({ component: Component, ...rest }: Props) {\r\n    \r\n    const { userStore: { isLoggedIn } } = useStore();\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to={`/`} /> }\r\n        />\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch } from 'react-router';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport { useLocation } from 'react-router-dom';\nimport TestErrors from '../../features/errors/TestErrors';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\n//import LoginForm from '../../features/users/LoginForm';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nconst App = function () {\n  \n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    \n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore]);\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading App...' />;\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar autoClose={1500} />\n      <ModalContainer />\n\n      <Route exact path='/' component={HomePage} />\n\n      <Route path={'/(.+)'} render={() => {\n          return(\n            <>\n              <NavBar />\n              <Container style={{ marginTop: '7em' }}>\n                <Switch>\n                  <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                  <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                  <PrivateRoute key={location.key} path={['/activity/create', '/activity/manage/:id']} component={ActivityForm} />\n                  <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                  <PrivateRoute path='/errors' component={TestErrors} />\n                  <Route path='/server-error' component={ServerError} />\n                  {/* <Route path='/login' component={LoginForm} /> */}\n                  <Route component={NotFound} />\n                </Switch>\n              </Container>\n            </>\n          )\n        }}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst ScrollToTop = function () {\r\n    \r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        \r\n        window.scrollTo(0, 0);\r\n\r\n    }, [pathname]);\r\n\r\n    return (\r\n        null\r\n    );\r\n};\r\n\r\nexport default ScrollToTop;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  // <React.StrictMode>\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}